package com.mycompany.a3;

import java.util.ArrayList;
import java.util.Observable;
import com.codename1.charts.util.ColorUtil;
import com.codename1.charts.models.Point;

public class GameWorld extends Observable { 
	private static int gameHeight=1000; 
	private static int gameWidth=1000; 
	
	//attributes used to make the objects
	private int clock; 
	private int lives; 
	private boolean soundOn;
	private boolean pause; 
	private boolean position; 
	
	private Sound FoodStationSnd; 
	private Sound lifeSnd; 
	private Sound flagSnd; 
	private BgSound bgSnd; 
	//Creating collection 
	private GameWorldCollection listOfObjects;
	private Ant ant; 
	
	//Game world cals init to initialize the game world
	public GameWorld() {}
	
	//The initilization of objects
	public void init() {
		listOfObjects=new GameWorldCollection(); //holds all objects
		this.clock=0; //holds game time
		this.soundOn=false; // Holds boolean value for sound
		this.pause=false;
		this.position=false; 
		addAllObjects(); //adds all objects for the game
		 
		this.setChanged();
		this.notifyObservers(this); //notifying observers of the change 
	}
	
	//Getters and setters for some of the attributes located here
	public int getTime() {
		return clock; 
	}
	
	//Using this method to add game obejects
	public void addAllObjects() {
		GameWorld gw =new GameWorld(); 
		float x = 0, y = 0; 
		int foodStation=3; 
		int flag=9;
		int spiders=2; 
		//singleton pattern use
		listOfObjects.add(Ant.getAnt(this));
		
		for(int i=1;i<=flag;i++) {
			listOfObjects.add(new Flag(i));
		}
		
		for(int i=1;i<=foodStation;i++) {
			listOfObjects.add(new FoodStation(this)); 
		}
		
		for(int i=1;i<=spiders;i++) {
			listOfObjects.add(new Spider(this)); 
		}
		
		//Getting location of the first flag
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Flag) {
				if(((Flag)temp).getSequenceNumber()==1) {
					x=((Flag)temp).getX();
					y=((Flag)temp).getY();
				}
			}
		}
		
		//Assigning x and y to Ant
		IIterator itr2=listOfObjects.getIterator(); 
		while(itr2.hasNext()) {
			GameObject temp2=itr2.getNext(); 
			if(temp2 instanceof Ant) {
				((Ant)temp2).setLocation(new Point(x,y));
			}
		}
	
	}
	
	//Game Methods
	
	//Accelerate 'a'
	public void accelerateSpeed() {
		
		IIterator itr = listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp =itr.getNext();
			if(temp instanceof Ant) {
				((Ant)temp).accelerateSpeed();
			}
		}
		this.setChanged();
		this.notifyObservers(this); 
	}
	
	//Brake 'b'
	public void decreaseSpeed() {
		
		IIterator itr= listOfObjects.getIterator();
		while(itr.hasNext()) {
			GameObject temp =itr.getNext();
			if(temp instanceof Ant) {
				((Ant)temp).decreaseAntSpeed();
			}
	}
	this.setChanged();
	this.notifyObservers(this); 
		
	}
	
	
	//Turn ant left 'r'
	public void turnAntRight() {
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				((Ant)temp).steerAntRight();
			}
		}
		this.setChanged();
		this.notifyObservers(this);
	}
	
	//Turn ant right 'l'
	public void turnAntLeft() {
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				((Ant)temp).steerAntLeft();
			}
		}
		this.setChanged();
		this.notifyObservers(this);
	}
					
	//adding a new food station after the last one was hit 
	public void addNewFoodStation(){
		listOfObjects.add(new FoodStation(this)); 
	}
	
	
	
	
	//Clock tick 't'
	public void tick() { 
		clock++; //adding to timer
		
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				if(((Ant)temp).getFoodLevel()!=0 && ((Ant)temp).getHealthLevel()>0) {
					((Ant)temp).move(); 
					((Ant)temp).foodLevelTick();
					
					IIterator itr2=listOfObjects.getIterator();
					while(itr2.hasNext()) {
						GameObject temp2=itr2.getNext(); 
						if(temp2 instanceof Spider) {
							((Spider)temp2).spiderMove(); 
							((Spider)temp2).move();
						}
					}
					
				}else if(((Ant)temp).getLives()!=0){
					System.out.println("You have lost 1 life");
					int tempFlag= ((Ant)temp).getLastFlagReached(); 
					
					IIterator itr3=listOfObjects.getIterator(); 
					
					while(itr3.hasNext()) {
						GameObject temp2 =itr3.getNext(); 
						if(temp2 instanceof Flag) {
							if(tempFlag== ((Flag)temp2).getSequenceNumber()) {
								float flagX=((Flag)temp2).getX();
								float flagY=((Flag)temp2).getY();
								((Ant)temp).antReset(flagX,flagY); 
							}
					 }
					
				}
			}else {
				System.out.println("Game Over"); 
				System.exit(0); 
			}
		}
	}
		checkForCollisions(); 
		if(getSound()) {
			bgSnd.play(); 
		}
		this.setChanged(); 
		this.notifyObservers(this); 
}
	
	
	//Checking for collisions between all objects
	public void checkForCollisions() {
		IIterator itr=listOfObjects.getIterator(); 
		
		while(itr.hasNext()) {
			GameObject tmp=itr.getNext(); 
			IIterator itr2= listOfObjects.getIterator(); 
			
			while(itr2.hasNext()) {
				GameObject tmp2= itr2.getNext(); 
				if(tmp!=tmp2) {
					if(tmp.collidesWith(tmp2)) {
						if(tmp instanceof Ant && tmp2 instanceof Spider) {
							if(getSound()) {
								lifeSnd.play(); 
							}
							}else if(tmp instanceof Ant && tmp2 instanceof Flag) {
								if(getSound()) {
									flagSnd.play(); 
								}
							}else if(tmp instanceof Ant && tmp2 instanceof FoodStation) { 
								if(getSound()) { 
									FoodStationSnd.play(); 
								}
							}
						tmp.handleCollision(tmp2); 
						}
					}
				}
			}
			
		}
		
		
	
	
	//Display the game stats 'd'
	public void display() {
		System.out.println("Displaying all game stats"); 
		
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext();
			if(temp instanceof Ant) {
				int lives=((Ant)temp).getLives(); 
				int clock=getTime(); 
				int lastFlag= ((Ant)temp).getLastFlagReached();
				int currentFoodLevel= ((Ant)temp).getFoodLevel();
				int currentHealth= ((Ant)temp).getHealthLevel();
				System.out.println("Lives left: "+lives);
				System.out.println("The time that has elapsed is:  "+clock);
				System.out.println("Last Flag reacged: "+lastFlag);
				System.out.println("Current food level: "+currentFoodLevel);
				System.out.println("Current Health: "+currentHealth);
				
			}
		}
		
	}
	
	//display the map of the objects in the game 'm'
	public void map() {
		System.out.println("Your Game: ");
		IIterator iter=listOfObjects.getIterator(); 
		while(iter.hasNext()) {
			System.out.println(((GameObject)iter.getNext()).toString());
			
		}
	}
	
	//Ending the game and getting stats for scoreview
	
	//returning the list of objects 
	public GameWorldCollection getCollection() {
		return listOfObjects; 
		
	}
	
	//getting the ants lives 
	public int getLife() { 
		IIterator itr =listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject object=(GameObject)itr.getNext(); 
			if(object instanceof Ant) {
				return ((Ant)object).getLives(); 
			}
		}
		return 0;
	}
	
	//getting the ants foodLevel 
	public int getFoodLevel() { 
		IIterator itr =listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject object=(GameObject)itr.getNext(); 
			if(object instanceof Ant) {
				return((Ant)object).getFoodLevel(); 
			}
		}
		return 0;
	}
	
	//getting the ants HealthLevel 
	public int getHealthLevel() { 
		IIterator itr =listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject object=(GameObject)itr.getNext(); 
			if(object instanceof Ant) {
				return((Ant)object).getHealthLevel(); 
			}
		}
		return 0;
	}
	
	
	//getting the ants lastFlagReached 
		public int getLastFlagReacged() { 
			IIterator itr =listOfObjects.getIterator(); 
			while(itr.hasNext()) {
				GameObject object=(GameObject)itr.getNext(); 
				if(object instanceof Ant) {
					return((Ant)object).getLastFlagReached(); 
				}
			}
			return 0;
		}
		
		//Sound creation
		
		public void createSound() { 
			flagSnd= new Sound("flagSnd.wav"); 
			FoodStationSnd=new Sound("FoodStationSnd.wav"); 
			lifeSnd= new Sound("SpiderSnd.wav"); 
			bgSnd=new BgSound("BgSnd.wav"); 
			
		}
		//sound off
		public void soundOff() {
			bgSnd.pause(); 
		}
		
		//Sound on
		public void soundOn() { 
			if(getSound()) { 
				bgSnd.play(); 
			}
		}
		
		
		//Closing game
		public void exit() {
			System.exit(0);
		}
		
		public void setSound(boolean sound) {
			this.soundOn=sound; 
			this.setChanged(); 
			this.notifyObservers(this); 
		}

		public boolean getSound() {
			return soundOn;
		}
		//Pause
		public boolean getPause() { 
			return pause; 
		}
		
		public void setPause(boolean pause) { 
			this.pause=pause; 
		}
		
		//Position
		public void positionOn() {
			if(position==true) {
				position=false;
			}else {
				position=true; 
			}
		}
		//no position
		public void positionOff() {
			position=false; 
		}
		
		//Fixed object selection processing 
		public void clickedOn(Point clickPnt, Point origPoint) { 
			IIterator temp= listOfObjects.getIterator(); 
			while(temp.hasNext()) {
				Fixed tempFixed=(Fixed)temp.getCurrent(); 
				if(position && tempFixed.isSelected()) { 
					int newY=(int) (clickPnt.getY()- origPoint.getY()); 
					int newX=(int) (clickPnt.getX() - origPoint.getX()); 
					tempFixed.setLocation(newX,newY);
					position=false; 
					tempFixed.setSelected(false);
				}else {
					if(tempFixed.contains(clickPnt,origPoint)) { 
						tempFixed.setSelected(true); 
					}else {
						tempFixed.setSelected(false);
					}
					
				}
			}
			this.setChanged();
			this.notifyObservers(); 
		}

		public void loseLifeSound() {
			if(getSound()){
				lifeSnd.play(); 
			}
			
		}

		public static int getGameHeight() {
			return gameHeight;
		}

		public static void setGameHeight(int gameHeight) {
			GameWorld.gameHeight = gameHeight;
		}

		public static int getGameWidth() {
			return gameWidth;
		}

		public static void setGameWidth(int gameWidth) {
			GameWorld.gameWidth = gameWidth;
		}
		
		
		


}
