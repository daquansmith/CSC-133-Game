package com.mycompany.a2;

import java.util.ArrayList;
import java.util.Observable;
import com.codename1.charts.util.ColorUtil;
import com.codename1.charts.models.Point;

public class GameWorld extends Observable { 
	//attributes used to make the objects
	private int clock; 
	private int lives; 
	private boolean soundOn; 
	//Creating collection 
	private GameWorldCollection listOfObjects;
	private Ant ant; 
	
	//Game world cals init to initialize the game world
	public GameWorld() {}
	
	//The initilization of objects
	public void init() {
		listOfObjects=new GameWorldCollection(); //holds all objects
		this.clock=0; //holds game time
		this.soundOn=false; // Holds boolean value for sound
		addAllObjects(); //adds all objects for the game
		this.setChanged();
		this.notifyObservers(this); //notifying observers of the change 
	}
	
	//Getters and setters for some of the attributes located here
	public int getTime() {
		return clock; 
	}
	
	//Using this method to add game obejects
	public void addAllObjects() {
		float x = 0, y = 0; 
		int foodStation=3; 
		int flag=9;
		int spiders=2; 
		//singleton pattern use
		listOfObjects.add(Ant.getAnt());
		ant=Ant.getAnt(); 
		
		for(int i=1;i<=flag;i++) {
			listOfObjects.add(new Flag(i));
		}
		
		for(int i=1;i<=foodStation;i++) {
			listOfObjects.add(new FoodStation()); 
		}
		
		for(int i=1;i<=spiders;i++) {
			listOfObjects.add(new Spider()); 
		}
		
		//Getting location of the first flag
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Flag) {
				if(((Flag)temp).getSequenceNumber()==1) {
					x=((Flag)temp).getX();
					y=((Flag)temp).getY();
				}
			}
		}
		
		//Assigning x and y to Ant
		IIterator itr2=listOfObjects.getIterator(); 
		while(itr2.hasNext()) {
			GameObject temp2=itr2.getNext(); 
			if(temp2 instanceof Ant) {
				((Ant)temp2).setLocation(new Point(x,y));
			}
		}
	
	}
	
	//Game Methods
	
	//Accelerate 'a'
	public void accelerateSpeed() {
		
		IIterator itr = listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp =itr.getNext();
			if(temp instanceof Ant) {
				((Ant)temp).accelerateSpeed();
			}
		}
		this.setChanged();
		this.notifyObservers(this); 
	}
	
	//Brake 'b'
	public void decreaseSpeed() {
		
		IIterator itr= listOfObjects.getIterator();
		while(itr.hasNext()) {
			GameObject temp =itr.getNext();
			if(temp instanceof Ant) {
				((Ant)temp).decreaseAntSpeed();
			}
	}
	this.setChanged();
	this.notifyObservers(this); 
		
	}
	
	
	//Turn ant left 'r'
	public void turnAntRight() {
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				((Ant)temp).steerAntRight();
			}
		}
		this.setChanged();
		this.notifyObservers(this);
	}
	
	//Turn ant right 'l'
	public void turnAntLeft() {
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				((Ant)temp).steerAntLeft();
			}
		}
		this.setChanged();
		this.notifyObservers(this);
	}
	
	//Ant collides with food station 'f'
	public void collisionFoodStation() {
		System.out.println("Ant collided with food station"); 
		IIterator itr=listOfObjects.getIterator(); 
		
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {//finding ant
				IIterator itr2=listOfObjects.getIterator();
				while(itr2.hasNext()) {
					GameObject temp2=itr.getNext(); 
				//finding food station 
					if( temp2 instanceof FoodStation) {
						if(((FoodStation)temp2).getCapacity()!=0) {
							int cap=((FoodStation)temp2).getCapacity(); 
							((Ant)temp).setFoodLevel(cap+((Ant)temp).getFoodLevel()); 
							((FoodStation)temp2).setCapacity(0); 
							((FoodStation)temp2).setColor(ColorUtil.rgb(0,100,0));
							addNewFoodStation(); 
							break; 
						}
					}
				}
			}
		}
		this.setChanged(); 
		this.notifyObservers(this); 
	}
			
			
				
	//adding a new food station after the last one was hit 
	public void addNewFoodStation(){
		listOfObjects.add(new FoodStation()); 
	}
	
	//Ant collides with flag 1-9
	public void collisionFlag(int f) {
		System.out.println("There was a collision between the Ant and a Flag"); 
		//checks for all flags and sees whether or not the ant is at the correct flag 
		IIterator itr= listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				int last=((Ant)temp).getLastFlagReached(); 
				last++;
				if(last==f && f!=9) {
					System.out.println("The Ant has reached the next Flag");
					((Ant)temp).setLastFlagReached(f); 	
				}else if (last==9) {
					System.out.println("Game Over, You Won!"); 
					System.exit(0);
				}else {
					System.out.println("Have passed or havent reached"); 
				}
			}
		}
		this.setChanged(); 
		this.notifyObservers(this); 
	}
	
	//Ant collides with spider 'g'
	public void spiderCollision() {
		System.out.println("Ant has collided with a Spider"); 
		IIterator itr= listOfObjects.getIterator(); 
		
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				if(((Ant)temp).getHealthLevel()==0) {
					System.out.println("Your ant is dead."); 
					if(((Ant)temp).getHealthLevel()!=0) {
						int tempFlag=((Ant)temp).getLastFlagReached();
						IIterator itr2=listOfObjects.getIterator();
						while(itr2.hasNext()) {
							GameObject temp2=itr2.getNext(); 
							if(temp2 instanceof Flag) {
								if(tempFlag== ((Flag)temp2).getSequenceNumber()) {
									float flagX=((Flag)temp2).getX();
									float flagY=((Flag)temp2).getY();
									((Ant)temp).antReset(flagX,flagY); 
								}
							}
						}
					}else {
						System.out.println("Game is Over");
						System.exit(0);
					}
				}
			else {
				((Ant)temp).healthLoss();
				((Ant)temp).healthLevelCheck();
				((Ant)temp).setColor(ColorUtil.rgb((int)(255*0.9)/((Ant)temp).getHealthLevel(),255,0));
			}
			}
		}
		this.setChanged();
		this.notifyObservers(this); 
	
	}
	
	//Clock tick 't'
	public void tick() {
		System.out.println("Clock Ticks"); 
		clock++; //adding to timer
		
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext(); 
			if(temp instanceof Ant) {
				if(((Ant)temp).getFoodLevel()!=0) {
					((Ant)temp).move(); 
					((Ant)temp).setHeading(0);
					((Ant)temp).foodLevelTick();
					
					IIterator itr2=listOfObjects.getIterator();
					while(itr2.hasNext()) {
						GameObject temp2=itr2.getNext(); 
						if(temp2 instanceof Spider) {
							((Spider)temp2).spiderMove(); 
							((Spider)temp2).move();
						}
					}
					
				}else if(((Ant)temp).getLives()!=0){
					System.out.println("You have lost 1 life");
					int tempFlag= ((Ant)temp).getLastFlagReached(); 
					IIterator itr3=listOfObjects.getIterator(); 
					
					while(itr3.hasNext()) {
						GameObject temp2 =itr3.getNext(); 
						if(temp2 instanceof Flag) {
							if(tempFlag== ((Flag)temp2).getSequenceNumber()) {
								float flagX=((Flag)temp2).getX();
								float flagY=((Flag)temp2).getY();
								((Ant)temp).antReset(flagX,flagY); 
							}
					 }
					
				}
			}else {
				System.out.println("Game Over"); 
				System.exit(0); 
			}
		}
	}
		this.setChanged(); 
		this.notifyObservers(this); 
}
	//Display the game stats 'd'
	public void display() {
		System.out.println("Displaying all game stats"); 
		
		IIterator itr=listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject temp=itr.getNext();
			if(temp instanceof Ant) {
				int lives=((Ant)temp).getLives(); 
				int clock=getTime(); 
				int lastFlag= ((Ant)temp).getLastFlagReached();
				int currentFoodLevel= ((Ant)temp).getFoodLevel();
				int currentHealth= ((Ant)temp).getHealthLevel();
				System.out.println("Lives left: "+lives);
				System.out.println("The time that has elapsed is:  "+clock);
				System.out.println("Last Flag reacged: "+lastFlag);
				System.out.println("Current food level: "+currentFoodLevel);
				System.out.println("Current Health: "+currentHealth);
				
			}
		}
		
	}
	
	//display the map of the objects in the game 'm'
	public void map() {
		System.out.println("Your Game: ");
		IIterator iter=listOfObjects.getIterator(); 
		while(iter.hasNext()) {
			System.out.println(((GameObject)iter.getNext()).toString());
			
		}
	}
	
	//Ending the game and getting stats for scoreview
	
	//returning the list of objects 
	public GameWorldCollection getCollection() {
		return listOfObjects; 
		
	}
	
	//getting the ants lives 
	public int getLife() { 
		IIterator itr =listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject object=(GameObject)itr.getNext(); 
			if(object instanceof Ant) {
				return ((Ant)object).getLives(); 
			}
		}
		return 0;
	}
	
	//getting the ants foodLevel 
	public int getFoodLevel() { 
		IIterator itr =listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject object=(GameObject)itr.getNext(); 
			if(object instanceof Ant) {
				return((Ant)object).getFoodLevel(); 
			}
		}
		return 0;
	}
	
	//getting the ants HealthLevel 
	public int getHealthLevel() { 
		IIterator itr =listOfObjects.getIterator(); 
		while(itr.hasNext()) {
			GameObject object=(GameObject)itr.getNext(); 
			if(object instanceof Ant) {
				return((Ant)object).getHealthLevel(); 
			}
		}
		return 0;
	}
	//getting the ants lastFlagReached 
		public int getLastFlagReacged() { 
			IIterator itr =listOfObjects.getIterator(); 
			while(itr.hasNext()) {
				GameObject object=(GameObject)itr.getNext(); 
				if(object instanceof Ant) {
					return((Ant)object).getLastFlagReached(); 
				}
			}
			return 0;
		}
		
		//Closing game
		public void exit() {
			System.exit(0);
		}
		
		public void setSound(boolean sound) {
			this.soundOn=sound; 
		}

		public boolean getSound() {
			// TODO Auto-generated method stub
			return soundOn;
		}


}
