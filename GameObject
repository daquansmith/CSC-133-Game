package com.mycompany.a3;

import com.codename1.charts.models.Point;
import com.codename1.charts.util.ColorUtil;

import java.util.ArrayList;
import java.util.Random; 

public abstract class GameObject implements ICollider{
	public Random rndm= new Random(); 
	private int size;//all objects have sizes 
	private Point location; //all objects have a specific location
	private int color;//all objects have colors
	
	private GameWorld gw; 
	private int MAX_X= 999; 
	private int MIN_X= 100; 
	private int MAX_Y= 999; 
	private int MIN_Y= 100; 
	
	private ArrayList<GameObject> cols; 
	
	//abstract constructor
	public GameObject(int color, GameWorld gw) {
		this.color=color; 
		float x= (float) (new Random().nextInt(MAX_X-MIN_X)+MIN_X); 
		float y= (float) (new Random().nextInt(MAX_Y - MIN_Y)+ MIN_Y);
		this.gw=gw; 
		this.location=new Point(x,y); 
		cols=new ArrayList<GameObject>(); 
	}
	
	//Abstract constructor
	public GameObject(int color, int size, GameWorld gw) {
		this.color=color; 
		this.size=size; 
		this.gw=gw; 
		float x= (float) (new Random().nextInt(MAX_X-MIN_X)+MIN_X); 
		float y= (float) (new Random().nextInt(MAX_Y - MIN_Y)+ MIN_Y);
		this.location=new Point(x,y); 
		cols=new ArrayList<GameObject>(); 
	}
	
	//Getters and setters 
	//getting size 
	public int getSize() {
		return size;
	}
	//getting color
	public int getColor() {
		return color;
	}
	//get x for location 
	public float getX() {
		return location.getX(); 
	}
	//get y for location 
	public float getY() {
		return location.getY(); 
	}
	//set color of object
	public void setColor(int color) {
		this.color=color;
		
	}
	//set size of object
	public void setSize(int size) {
		this.size=size;
	}
	//Getting the location
	public Point getLocation() {
		return location;
	}
	//Setting the location
	public void setLocation(Point location) {
		this.location.setX((float) (((float)Math.round(location.getX())*10.0)/10.0)); 
		this.location.setY((float) (((float)Math.round(location.getY())*10.0)/10.0)); 
	}
	
	
	public boolean collidesWith(GameObject object) { 
		boolean result= false; 
		double thisCenterX =this.getX() +(object.size/2); 
		double thisCenterY= this.getY()+ (object.size/2); 
		
		double otherCenterX= object.getX();
		double otherCenterY= object.getY(); 
		
		double dx= thisCenterX-otherCenterX; 
		double dy= thisCenterY-otherCenterY; 
		
		double distanceBetweenCenterSqr =(dx*dx+dy*dy); 
		int thisRadius= this.getSize()/2;
		int otherRadius=object.getSize()/2; 
		int radiiSqr=(thisRadius*thisRadius + 2 * thisRadius *otherRadius+ otherRadius *otherRadius); 
		
		if(distanceBetweenCenterSqr <= radiiSqr) { 
			result=true; 
			
		}
		return result; 
	}
	
	//ToString object override
	public String toString() {
		String displayString="Loc = "+Math.round((location.getX()*10.0)/10.0) +","+ Math.round((location.getY()*10.0)/10.0)+" Color = ["+ColorUtil.red(color) + ","+ColorUtil.green(color)+","+ColorUtil.blue(color)+"]" + " size = "+getSize(); ;
		return displayString;
	}

	public ArrayList<GameObject> getCols() {
		return cols;
	}
	
	public GameWorld getGW() { return gw; } 

}
